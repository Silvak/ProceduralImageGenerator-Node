const express = require('express')
var superagent = require('superagent')
var charset = require('superagent-charset')
charset(superagent)
const cheerio = require('cheerio')
const app = express()
const reqUrl = 'https://pixabay.com/zh/photos/search/'
/* 
  * superagent是一个轻量的,渐进式的ajax api,可读性好,学习曲线低,内部依赖nodejs原生的请求api,适用于nodejs环境下.，也可以使用http发起请求
  * superagent-charset防止爬取下来的数据乱码，更改字符格式
  * cheerio为服务器特别定制的，快速、灵活、实施的jQuery核心实现
*/
init(3)
function init (nums) {
  app.get('/index', function (req, res) {
    //设置请求头
    res.header("Access-Control-Allow-Origin", "*")
    res.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS')
    res.header("Access-Control-Allow-Headers", "X-Requested-With")
    res.header('Access-Control-Allow-Headers', 'Content-Type')

    //网页页面信息是gb2312，所以chaeset应该为.charset('gb2312')，一般网页则为utf-8,可以直接使用.charset('utf-8')
    superagent.get(reqUrl)
      .charset('gb2312')
      .end(function (err, sres) {
        var items = []
        if (err) {
          console.log('ERR: ' + err)
          res.json({ code: 400, msg: err, sets: items })
          return
        }
        var $ = cheerio.load(sres.text)
        $('div.flex_grid div.item  a').each(function (idx, element) {
          var itemSrc = $(element).find('img').attr('src')
          if (/.jpg$/.test(itemSrc) && items.length < nums) {
            items.push({
              thumbSrc: itemSrc
            })
          }
        })
        res.json({ code: 200, msg: "success", data: items })
      })
  })
  var server = app.listen(8002, function () {
    var port = server.address().port
    console.log('应用实例，访问地址为http://localhost:%s', port)
  })
}
